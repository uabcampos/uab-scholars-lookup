#!/usr/bin/env python3
"""fetch_gimpop_profiles.py

Fetch Scholars@UAB profiles for every faculty name listed in
`cleaned_faculty_names.txt` (generated by `parse_gimpop_faculty.py`).
Each profile (including publications/grants/teaching) is saved to
`scholar_data/<slug_name>_profile_<timestamp>.json`.

Run:
    python fetch_gimpop_profiles.py [--workers 6]
"""
from __future__ import annotations

import argparse
import asyncio
import json
import time
from pathlib import Path
from typing import List

from uab_scholars_tool_fully_optimized_and_renamed import Tools

# ---------------------------------------------------------------------------
# Helpers
# ---------------------------------------------------------------------------
ROOT = Path(__file__).resolve().parent
NAMES_FILE = ROOT / "cleaned_faculty_names.txt"
OUTPUT_DIR = ROOT / "scholar_data"
OUTPUT_DIR.mkdir(exist_ok=True)

tool = Tools()


def slugify(text: str) -> str:
    """File-system-safe slug (lowercase letters, digits, hyphen)."""
    import re, unicodedata

    text = unicodedata.normalize("NFKD", text).encode("ascii", "ignore").decode()
    text = re.sub(r"[^a-zA-Z0-9]+", "-", text).strip("-").lower()
    return re.sub(r"-{2,}", "-", text)


async def fetch_one(name: str) -> None:
    """Fetch a profile; write JSON to disk; log minimal status."""
    try:
        raw_json = await tool.search_scholars(name)
        data = json.loads(raw_json)
        status = data.get("status")
        if status != "success":
            print(f"⚠️  {name}: {status}")
            return
        timestamp = int(time.time())
        out_file = OUTPUT_DIR / f"{slugify(name)}_profile_{timestamp}.json"
        out_file.write_text(raw_json)
        print(f"✅ {name} → {out_file.name}")
    except Exception as e:
        print(f"❌ {name}: {e}")


async def main(names: List[str], workers: int) -> None:
    sem = asyncio.Semaphore(workers)

    async def limited(n: str):
        async with sem:
            await fetch_one(n)

    await asyncio.gather(*(limited(n) for n in names))


if __name__ == "__main__":
    ap = argparse.ArgumentParser()
    ap.add_argument("--workers", type=int, default=6, help="Number of concurrent fetch tasks")
    args = ap.parse_args()

    if not NAMES_FILE.exists():
        raise SystemExit("Run parse_gimpop_faculty.py first – cleaned_faculty_names.txt missing.")

    names_list = [ln.strip() for ln in NAMES_FILE.read_text().splitlines() if ln.strip()]
    asyncio.run(main(names_list, args.workers)) 